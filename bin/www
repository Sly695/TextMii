#!/usr/bin/env node

/**
 * Module dependencies.
 */

const session = require("express-session");

var app = require('../app');
var debug = require('debug')('textmiibackend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//INITIALISATION DU MODULE SOCKET.IO
var io = require('socket.io')(server, {
  cors: {
    origin: "*",
  }
});


const { instrument } = require('@socket.io/admin-ui');

let userConnected = {};

io.use((socket, next) => {
  const token = socket.handshake.auth.token;
  if (token) {
    const session = sessionStore.findSession(token);
    console.log(session)
    next();
  }
  // // create new session
  // socket.sessionID = randomId();

  next();
})



io.on('connection', function (socket) { //Mise en écoute de l'événement “connection”
  const sessionID = socket.handshake.auth.sessionID;
  socket.on('sendMessage', function (message, room) {
    if (room === "") {
      socket.broadcast.emit("sendMessageBack", message)
    } else {
      socket.to(room).emit("sendMessageFromBack", message, room, socket.id)
    }
  });

  socket.on("login", function (username) {
    const session = socket.request.session;
    console.log(session)
    userConnected[socket.id] = username;
    socket.emit("userConnected", userConnected);
    console.log({ "connected": userConnected });
  })

  socket.on('disconnect', function () {
    delete userConnected[socket.id];
    socket.emit("userConnected", userConnected);
    console.log({ "disconnected": userConnected });
  });



});

instrument(io, { auth: false })

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
